# -*- coding: utf-8 -*-
"""Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I-J9zecIyOdI4ErcrwPOTCN2wo5-4mEP
"""

import DSA
q = 18462870797958734358460540315802311963744999954506807981508498635091
p = 21844102112122237484058484990223222527816981702828279171498143036582716271485474028380542696862193720852272618397503658771128114568430034544311836848132556591324273117839115478343051538427437664722980830771161939139222964707695276957432968033365352302080366315415735532111302710857807281798249043320899027800135122873123243743524724602070457967657285884563858968187732680723369906222214201250288443824722261682828970158731587663585174032887767988219143996717380923998096794060064023264584949115354715211375168860544716843940259887168163262505413440632980952366656691935232538721726450037087263854935179798694999345517
g = 13843079639351340920273184714590884400432847093058770970775133079628015343474638985949514224469231316509301786191837239734743524804707156837615319355419215945094865320399756037490734275197507243978890158231379210099367755690209217652326933425758170008835084657241675545571324146202714002127571892258435472678396358353938476569410849475658691697420643000086724156167275855286708191941521213998074404126295230559090196852525498568126029906179168789585152438330622252753643553805877257623433974639379577436808678860489830511416186993204671106346196262903362008285485594747047950971109814842643611103016670841253194356243
beta = 6187481213658176498787124123601684091780046690985227386674127034254039365850646655310542241724937514112519192485497669738105144173607992347626869972509174309127140941080651743898030456747633487761927322752193676176314211884662768871783260572354989592156755352437101758031330846064492530779348477298394716501400849788380847680039744807953192006233069850428367974025006391433578254859633968702925514987402010031888483663325943692618870576893826021018783543580318493456251127341437691102522482919743872855098214539426447960934626890138798345418250945885432084267499991534185991486840567366979305573275554091497155603826
m1 = b"He who laugh last didn't get the joke"
r1 = 6164572993148268278544315246158794966061243456603081427389792698784
s1 = 2412874836775368230194957659405258449579579568340501217618177629780
m2 = b"Ask me no questions, and I'll tell you no lies"
r2 = 6164572993148268278544315246158794966061243456603081427389792698784
s2 = 343379365128270720539597367095485301128970178274104846189598795161
#r1 = r2

shake1 = DSA.SHAKE128.new(m1)
h1 = int.from_bytes(shake1.read(q.bit_length()//8), byteorder='big') #computing hash for m1
shake2 = DSA.SHAKE128.new(m2)
h2 = int.from_bytes(shake2.read(q.bit_length()//8), byteorder='big') #computing hash for m1

a = (s2*h1 - s1*h2) * DSA.modinv(r1 * (s1 - s2),q) #Computing a when i=2, j=1
a = a % q

beta_ = pow(g,a,p) #computing corresponding public keys

if beta_ == beta: #checking if it gives our public key
  print("Private key is:", a)